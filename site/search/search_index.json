{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Benjamin Wiki Benjamin project consist of different tools that you can find a short description and their relationship with each other down below. Applications ArBade \u2192 An Environment to record and manage your own voice dataset and later train a model out of it. Mom \u2192 An Application like PolyBar to manage different workspace, show system status and showing BaTool detection output. Batool \u2192 Engine that use Kaldi model to do online automatic speech recognition with focus on zero delay and maximum accuracy. ENN \u2192 A Neural Network Engine that trains a redundant model to detect out of vocabulary (OOV) word to overcome conventional FST model limitations. Rebound \u2192 An Application that sits between BaTool and operating system and act as a virtual input that simulates key strokes and complex command execution based on the focused process. Chess \u2192 Chess devides the screen into small cells that user can choose to select a mouse operation.","title":"Home"},{"location":"#benjamin-wiki","text":"Benjamin project consist of different tools that you can find a short description and their relationship with each other down below.","title":"Benjamin Wiki"},{"location":"#applications","text":"ArBade \u2192 An Environment to record and manage your own voice dataset and later train a model out of it. Mom \u2192 An Application like PolyBar to manage different workspace, show system status and showing BaTool detection output. Batool \u2192 Engine that use Kaldi model to do online automatic speech recognition with focus on zero delay and maximum accuracy. ENN \u2192 A Neural Network Engine that trains a redundant model to detect out of vocabulary (OOV) word to overcome conventional FST model limitations. Rebound \u2192 An Application that sits between BaTool and operating system and act as a virtual input that simulates key strokes and complex command execution based on the focused process. Chess \u2192 Chess devides the screen into small cells that user can choose to select a mouse operation.","title":"Applications"},{"location":"about/","text":"About Feel free to contact us by sending email.","title":"About"},{"location":"about/#about","text":"Feel free to contact us by sending email.","title":"About"},{"location":"arbade/","text":"ArBade Features: Building dataset for voice recognition engine by recording voice samples Handy tool to train and test voice samples Environment to verify online samples generated while using BaTool Verify samples generated in sleep mode to detect while not speeking with voice recognition engine. Review wrong words after verifying sleep samples. Verify triphone engine misclassified samples. Console environment to train on samples. User Guide Quick Start ArBade has many tabs, explained in the following. To change tab click or press numbers on keyboard starting from 1. ArBade is a shortcut based application. Shortcuts are listed in the application topbar. To see all shortcuts, press / . First step is to train a model from your voice. Record Samples specify a category name by pressing S . category name is used to distinguish between speaker or microphone. Start to record by pressing space . Say the words specified between <> while status is Rec . You can pause the Record procedure any time by using space and get out of record panel by pressing Escape . Then Statistics will be updated. Arbitrary name of category. Record list showing the samples recorded. Word list showing how many samples include the specific word. sample count in specific category. Detailed description about record parameters and procedure can be found in the User Guide Train Model After recording around 10 x Wordlist samples, you are ready to train your model by Pressing T . At any time outside of terminal, by pressing P or clicking on Console tab, you can access the results of running train scripts in terminal. All the train procedure is automatic and you should only wait for the dialog indicating train is finished and now it's ENN samples generation turn. And verifying engine false generated samples. Detailed description about train steps and procedure can be found in User Guide Verification When you are using Benjamin regularly, samples will be generated when issueing commands or recorded when in sleep mode saying ordinary words. To use these samples, you need to assure that they are matched with the detected words. For verifying these samples you can switch to Verify tab and press space to start verification process. While verifying sleep mode samples, make sure that all words are detected wrong. Verifying If the sample is wrong press Z to delete sample, while playing or at Decide Pause status after voice stopped. By default after playing each sample in unverified category, if there wasn't any key press, the sample will be verified. you can change this behaviour by pressing R . Detailed description about verification parameters and procedure can be found in User Guide Congrats! Now you know the very initial steps to train your model!","title":"ArBade"},{"location":"arbade/#arbade","text":"Features: Building dataset for voice recognition engine by recording voice samples Handy tool to train and test voice samples Environment to verify online samples generated while using BaTool Verify samples generated in sleep mode to detect while not speeking with voice recognition engine. Review wrong words after verifying sleep samples. Verify triphone engine misclassified samples. Console environment to train on samples.","title":"ArBade"},{"location":"arbade/#user-guide","text":"","title":"User Guide"},{"location":"arbade/#quick-start","text":"ArBade has many tabs, explained in the following. To change tab click or press numbers on keyboard starting from 1. ArBade is a shortcut based application. Shortcuts are listed in the application topbar. To see all shortcuts, press / . First step is to train a model from your voice.","title":"Quick Start"},{"location":"arbade/#record-samples","text":"specify a category name by pressing S . category name is used to distinguish between speaker or microphone. Start to record by pressing space . Say the words specified between <> while status is Rec . You can pause the Record procedure any time by using space and get out of record panel by pressing Escape . Then Statistics will be updated. Arbitrary name of category. Record list showing the samples recorded. Word list showing how many samples include the specific word. sample count in specific category. Detailed description about record parameters and procedure can be found in the User Guide","title":"Record Samples"},{"location":"arbade/#train-model","text":"After recording around 10 x Wordlist samples, you are ready to train your model by Pressing T . At any time outside of terminal, by pressing P or clicking on Console tab, you can access the results of running train scripts in terminal. All the train procedure is automatic and you should only wait for the dialog indicating train is finished and now it's ENN samples generation turn. And verifying engine false generated samples. Detailed description about train steps and procedure can be found in User Guide","title":"Train Model"},{"location":"arbade/#verification","text":"When you are using Benjamin regularly, samples will be generated when issueing commands or recorded when in sleep mode saying ordinary words. To use these samples, you need to assure that they are matched with the detected words. For verifying these samples you can switch to Verify tab and press space to start verification process. While verifying sleep mode samples, make sure that all words are detected wrong. Verifying If the sample is wrong press Z to delete sample, while playing or at Decide Pause status after voice stopped. By default after playing each sample in unverified category, if there wasn't any key press, the sample will be verified. you can change this behaviour by pressing R . Detailed description about verification parameters and procedure can be found in User Guide Congrats! Now you know the very initial steps to train your model!","title":"Verification"},{"location":"batool/","text":"BaTool BaTool is a real-time speech recognition engine, that gets a triphone Kaldi model and do a low latency speech recognition on the data coming from the system default microphone. BaTool Conf Batool is configurable via conf file next to BaTool application. It has 4 main sections to configure: Model Section: This section defines the location of Kaldi model files. The addresses are relative to where BaTool application exists. ; Model path [model] fst = \"Model/HCLG.fst\" mdl = \"Model/final.oalimdl\" word = \"Model/words.txt\" cmvn = \"Model/global_cmvn.stats\" Decoder Section: Kaldi related decoder settings. max_active = 900 min_active = 200 train_max = 5 ac_scale = 0.05 min_sil = 20 train_max : Maximum number of same samples for later training. min_sil : Minimum silence before detection. This value directly connected with accuracy and latency. Captain Section: ; Threshold for detecting words [captain] hard_threshold = 0.35 Miscellaneous Section: ; Miscellaneous parameters [misc] mic = \"Sennheiser\" channel = \"com_binaee_rebound\"","title":"BaTool"},{"location":"batool/#batool","text":"BaTool is a real-time speech recognition engine, that gets a triphone Kaldi model and do a low latency speech recognition on the data coming from the system default microphone.","title":"BaTool"},{"location":"batool/#batool-conf","text":"Batool is configurable via conf file next to BaTool application. It has 4 main sections to configure:","title":"BaTool Conf"},{"location":"batool/#model-section","text":"This section defines the location of Kaldi model files. The addresses are relative to where BaTool application exists. ; Model path [model] fst = \"Model/HCLG.fst\" mdl = \"Model/final.oalimdl\" word = \"Model/words.txt\" cmvn = \"Model/global_cmvn.stats\"","title":"Model Section:"},{"location":"batool/#decoder-section","text":"Kaldi related decoder settings. max_active = 900 min_active = 200 train_max = 5 ac_scale = 0.05 min_sil = 20 train_max : Maximum number of same samples for later training. min_sil : Minimum silence before detection. This value directly connected with accuracy and latency.","title":"Decoder Section:"},{"location":"batool/#captain-section","text":"; Threshold for detecting words [captain] hard_threshold = 0.35","title":"Captain Section:"},{"location":"batool/#miscellaneous-section","text":"; Miscellaneous parameters [misc] mic = \"Sennheiser\" channel = \"com_binaee_rebound\"","title":"Miscellaneous Section:"},{"location":"chess/","text":"Chess In the following image you can see chess in action. Chess supports following commands: Kick : Normal left click button Side : Right click button Drag : Drag with left click between two points. System Sierra : Take screenshot between two points and put it in clipboard Comments : Open chess on second monitor","title":"Chess"},{"location":"chess/#chess","text":"In the following image you can see chess in action. Chess supports following commands: Kick : Normal left click button Side : Right click button Drag : Drag with left click between two points. System Sierra : Take screenshot between two points and put it in clipboard Comments : Open chess on second monitor","title":"Chess"},{"location":"enn/","text":"ENN ENN generates neural network model from ENN samples. ENN samples are cepstrums that were normalized and aligned to a single word saved as a simple 40x40 binary array. we feed this to a convolutional neural network followed by a fully connected layer to detect out of vocabulary words. ENN is an optional feature that brings more accuracy and let you leave the system on always, so you dont need to say wake up words. ENN user interface includes these main tabs: Train Sample Link ENN Train In Train Tab you can watch the learning procedure of each word. In train Panel, learning loss and test loss is shown for first 4 words in wordlist panel. You can watch other word loss plots by pressing Up/Down arrow keys on keyboard. Hover on each word in word list panel to see how many samples are trained from total samples. Parameters Thread Num: Number of concurrent words to learn. (Be careful to set it lower than your number of CPU cores to prevent windows freeze) Learning rate: Base learning rate for each word to start training. Target Loss: Loss that model is considered learned. Param Num: Number of parameters the model has to learn. Data Count: Number of ENN samples in enn directory. Learned Count: Number of words that their loss become less than target loss. Loop Count: Training for each word takes 200 epoch, if target loss not reached. Then next word's training procedure starts. After all words training finished, program will start from first word and increases loop count. Train Time: Time that program is training words. ENN Sample Link In sample link tab all sample cepstrums are ploted in images. In this way you can find out why training for a word has large loss and not reaches the target loss. By using direction arrow keys you can select then play the wave related to each sample. Also change the word to see its samples. (Train procedure is not stopped while sample link is active) ENN Command Line Options -u : Set UI mode, to see the samples' image created from binary array. -t : Set Test mode -f : Testing reading file to create a dataset -l : Followed by a number to set learning rate for training neural network. e.g: enn.exe -l 0.001 -w : Followed by a string to set the word you want to train. By using this option, training will be done only on the specified word. enn.exe -w sierra","title":"ENN"},{"location":"enn/#enn","text":"ENN generates neural network model from ENN samples. ENN samples are cepstrums that were normalized and aligned to a single word saved as a simple 40x40 binary array. we feed this to a convolutional neural network followed by a fully connected layer to detect out of vocabulary words. ENN is an optional feature that brings more accuracy and let you leave the system on always, so you dont need to say wake up words. ENN user interface includes these main tabs: Train Sample Link","title":"ENN"},{"location":"enn/#enn-train","text":"In Train Tab you can watch the learning procedure of each word. In train Panel, learning loss and test loss is shown for first 4 words in wordlist panel. You can watch other word loss plots by pressing Up/Down arrow keys on keyboard. Hover on each word in word list panel to see how many samples are trained from total samples.","title":"ENN Train"},{"location":"enn/#parameters","text":"Thread Num: Number of concurrent words to learn. (Be careful to set it lower than your number of CPU cores to prevent windows freeze) Learning rate: Base learning rate for each word to start training. Target Loss: Loss that model is considered learned. Param Num: Number of parameters the model has to learn. Data Count: Number of ENN samples in enn directory. Learned Count: Number of words that their loss become less than target loss. Loop Count: Training for each word takes 200 epoch, if target loss not reached. Then next word's training procedure starts. After all words training finished, program will start from first word and increases loop count. Train Time: Time that program is training words.","title":"Parameters"},{"location":"enn/#enn-sample-link","text":"In sample link tab all sample cepstrums are ploted in images. In this way you can find out why training for a word has large loss and not reaches the target loss. By using direction arrow keys you can select then play the wave related to each sample. Also change the word to see its samples. (Train procedure is not stopped while sample link is active)","title":"ENN Sample Link"},{"location":"enn/#enn-command-line-options","text":"-u : Set UI mode, to see the samples' image created from binary array. -t : Set Test mode -f : Testing reading file to create a dataset -l : Followed by a number to set learning rate for training neural network. e.g: enn.exe -l 0.001 -w : Followed by a string to set the word you want to train. By using this option, training will be done only on the specified word. enn.exe -w sierra","title":"ENN Command Line Options"},{"location":"mom/","text":"Mom Mom is like PolyBar , it manages different workspace, shows system status and BaTool detection output. Mom is named after the fact that it will spawn all the child applications (BaTool, Chess, Rebound). Mom reads BaTool detection from Benjamin/Mom/Labels with PolyBar Application format . Mom has several widgets: Workspaces: you can switch between 6 workspaces showed with different icons. Word detection from BaTool and ENN . Date and time Music widget: Used to pause/play music. Also go to next/previous music. CPU usage Speaker: By clicking on this icon you can alter between speaker and headphone. By scrolling you can increase/decrease the volume. Focused application System status: Shows if system is running or sleeping or halted. Color of detected word is set by ENN application and sorted from best detection accuracy to worst: Best Good Lowest Confidence Wrong","title":"Mom"},{"location":"mom/#mom","text":"Mom is like PolyBar , it manages different workspace, shows system status and BaTool detection output. Mom is named after the fact that it will spawn all the child applications (BaTool, Chess, Rebound). Mom reads BaTool detection from Benjamin/Mom/Labels with PolyBar Application format . Mom has several widgets: Workspaces: you can switch between 6 workspaces showed with different icons. Word detection from BaTool and ENN . Date and time Music widget: Used to pause/play music. Also go to next/previous music. CPU usage Speaker: By clicking on this icon you can alter between speaker and headphone. By scrolling you can increase/decrease the volume. Focused application System status: Shows if system is running or sleeping or halted. Color of detected word is set by ENN application and sorted from best detection accuracy to worst: Best Good Lowest Confidence Wrong","title":"Mom"},{"location":"rebound/","text":"Rebound","title":"Rebound"},{"location":"rebound/#rebound","text":"","title":"Rebound"},{"location":"arbade/ug/","text":"User Guide A detailed description of ArBade functionalities is discussed in this document. Record Record Status Record Parameters Record Shortcuts Verify Verify Status Verify Parameters Verify Shortcuts Sleep Wrong False Test Enn False Console Record While recording the samples for training the voice recognition engine, you should know the status, parameters and shortcuts related to recording. Record Status Rec : Records your voice Pause : Pause the Recording Procedure Stop : Stop the record and navigate to statistics panel. Req Pause : Requested pause will be commited after recording finished Break : Time to let you read the words before recording started Record Parameters Category : Directories to classify samples you record with different devices. exceptions are unverified , online , sleep , wrong , test , enn and efalse which are used internally by Benjamin. Pause Time : Break time that lets you read the words before record process starts. Num of Words : Specify the number of words for recording samples. Rec Time : Defines the period of recording time. Count : Set this to the total number of samples you want to record in a single round. Focus Word : A displayed set of words will contain the Focus Word . Power : After recording the sample power of the voice will be displayed. Care about this parameter as this will be very low if the recording device has any problem. Time : Shows how much time passed from Rec Time Word : Shows the words you should say while recording Status : Shows recording status Record Shortcuts S : Set Category , unverified and efalse are prohibited. A dialog will be shown and ask for the desired Category . You can create a new Category or change between categories produced in the past. Space : Start or Pause recording. Up/Down : Increase/Decrease Pause Time . Right/Left : Increase/Decrease Rec Time . C : Change count, a dialog will be opened and ask for how many samples would you record. F : Set Focus Word , then the displayed words collection will contain Focus Word . A dialog will be opened and ask for the id of Focus Word . W : Opens a dialog to ask Num of Words . O : Opens selected Category directory. Verify By using Benjamin regularly, many samples will be created as online samples. However, these samples are not labeled correctly. There may be some mistakes among words from a sample. These samples are accumulated in unverified directory and by verifying them, they will be moved to online directory. Verification is done by playing the samples in unverified directory. you can refer to this section to know all status, parameters and shortcuts related to verification. Verify Shortcuts Space : Start or Pause playing. Up/Down : Increase/Decrease Pause Time . F : Set Focus Word , then the displayed words collection will contain Focus Word . A dialog will be opened and ask for the id of Focus Word . O : Opens unverified directory. Z : Press to move the sample from the unverified directory to the wrong directory. R : Changes default decision/action for verifying samples. Copy mode means after the Decide Pause timeout, the sample will be copied to the online directory. In the same way in Delete mode, timeout will cause sample removal. Sleep Verify samples recorded in sleep mode. In this mode listen to the recorded samples, if they contain any true samples press Z to get rid of them. All other samples will automatically moved to the wrong directory and they will be used to train the enn model. Wrong These are verified samples from the sleep directory. They are verified to be wrong samples, not true ones! In this mode, you will be able to review them and check if some samples are moved to this directory by accident. False During generating Enn samples, some of the samples in the train directory will not detect correctly, these samples will be moved to the efalse directory. In this mode, you can listen to these samples and judge whether they are real samples or the wrong ones which you should get rid of them. Test After training on samples, the model is evaluated through test samples. Word error rate (WER) and Sentence error rate (SER) are calculated by predicting test samples. Then false detected samples are listed in this tab and you can listen to them to figure out what went wrong. Enn False BaTool generates enn samples, from both train samples and wrong samples. The enn directory is the destination of this process. Enn files from the train directory are located in enn/true and wrong directory-related files are in enn/false . In the Enn False tab, only false statistics are shown. By clicking the trash icon, all Enn samples will be deleted. Console Training on samples is started by pressing T . After training is finished, a dialog pops up and asks to generate enn samples from audio samples. Neural Network will be trained from these enn samples. When generating Enn Samples is finished, another dialog arises and asks about verifying generated engine false detected samples. Engine false detected samples, abbreviated as efalse samples, are collected in the efalse directory. They are generated after training, and while testing samples in the test directory. You can verify them by switching to False and Test tabs.","title":"User Guide"},{"location":"arbade/ug/#user-guide","text":"A detailed description of ArBade functionalities is discussed in this document. Record Record Status Record Parameters Record Shortcuts Verify Verify Status Verify Parameters Verify Shortcuts Sleep Wrong False Test Enn False Console","title":"User Guide"},{"location":"arbade/ug/#record","text":"While recording the samples for training the voice recognition engine, you should know the status, parameters and shortcuts related to recording.","title":"Record"},{"location":"arbade/ug/#record-status","text":"Rec : Records your voice Pause : Pause the Recording Procedure Stop : Stop the record and navigate to statistics panel. Req Pause : Requested pause will be commited after recording finished Break : Time to let you read the words before recording started","title":"Record Status"},{"location":"arbade/ug/#record-parameters","text":"Category : Directories to classify samples you record with different devices. exceptions are unverified , online , sleep , wrong , test , enn and efalse which are used internally by Benjamin. Pause Time : Break time that lets you read the words before record process starts. Num of Words : Specify the number of words for recording samples. Rec Time : Defines the period of recording time. Count : Set this to the total number of samples you want to record in a single round. Focus Word : A displayed set of words will contain the Focus Word . Power : After recording the sample power of the voice will be displayed. Care about this parameter as this will be very low if the recording device has any problem. Time : Shows how much time passed from Rec Time Word : Shows the words you should say while recording Status : Shows recording status","title":"Record Parameters"},{"location":"arbade/ug/#record-shortcuts","text":"S : Set Category , unverified and efalse are prohibited. A dialog will be shown and ask for the desired Category . You can create a new Category or change between categories produced in the past. Space : Start or Pause recording. Up/Down : Increase/Decrease Pause Time . Right/Left : Increase/Decrease Rec Time . C : Change count, a dialog will be opened and ask for how many samples would you record. F : Set Focus Word , then the displayed words collection will contain Focus Word . A dialog will be opened and ask for the id of Focus Word . W : Opens a dialog to ask Num of Words . O : Opens selected Category directory.","title":"Record Shortcuts"},{"location":"arbade/ug/#verify","text":"By using Benjamin regularly, many samples will be created as online samples. However, these samples are not labeled correctly. There may be some mistakes among words from a sample. These samples are accumulated in unverified directory and by verifying them, they will be moved to online directory. Verification is done by playing the samples in unverified directory. you can refer to this section to know all status, parameters and shortcuts related to verification.","title":"Verify"},{"location":"arbade/ug/#verify-shortcuts","text":"Space : Start or Pause playing. Up/Down : Increase/Decrease Pause Time . F : Set Focus Word , then the displayed words collection will contain Focus Word . A dialog will be opened and ask for the id of Focus Word . O : Opens unverified directory. Z : Press to move the sample from the unverified directory to the wrong directory. R : Changes default decision/action for verifying samples. Copy mode means after the Decide Pause timeout, the sample will be copied to the online directory. In the same way in Delete mode, timeout will cause sample removal.","title":"Verify Shortcuts"},{"location":"arbade/ug/#sleep","text":"Verify samples recorded in sleep mode. In this mode listen to the recorded samples, if they contain any true samples press Z to get rid of them. All other samples will automatically moved to the wrong directory and they will be used to train the enn model.","title":"Sleep"},{"location":"arbade/ug/#wrong","text":"These are verified samples from the sleep directory. They are verified to be wrong samples, not true ones! In this mode, you will be able to review them and check if some samples are moved to this directory by accident.","title":"Wrong"},{"location":"arbade/ug/#false","text":"During generating Enn samples, some of the samples in the train directory will not detect correctly, these samples will be moved to the efalse directory. In this mode, you can listen to these samples and judge whether they are real samples or the wrong ones which you should get rid of them.","title":"False"},{"location":"arbade/ug/#test","text":"After training on samples, the model is evaluated through test samples. Word error rate (WER) and Sentence error rate (SER) are calculated by predicting test samples. Then false detected samples are listed in this tab and you can listen to them to figure out what went wrong.","title":"Test"},{"location":"arbade/ug/#enn-false","text":"BaTool generates enn samples, from both train samples and wrong samples. The enn directory is the destination of this process. Enn files from the train directory are located in enn/true and wrong directory-related files are in enn/false . In the Enn False tab, only false statistics are shown. By clicking the trash icon, all Enn samples will be deleted.","title":"Enn False"},{"location":"arbade/ug/#console","text":"Training on samples is started by pressing T . After training is finished, a dialog pops up and asks to generate enn samples from audio samples. Neural Network will be trained from these enn samples. When generating Enn Samples is finished, another dialog arises and asks about verifying generated engine false detected samples. Engine false detected samples, abbreviated as efalse samples, are collected in the efalse directory. They are generated after training, and while testing samples in the test directory. You can verify them by switching to False and Test tabs.","title":"Console"}]}