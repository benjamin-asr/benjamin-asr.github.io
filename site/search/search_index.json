{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Features \uf0c1 Speech Recognition Engine without connection to cloud or external server. Low latency recognition reaching down to less than 100ms. Remove wake-up word for every command. Enable local training of the model and fine-tune it for individual voices. Up to 99% accuracy thanks to the small set of words and adapt to the user's accent. Offer full customization of the word list and control over the training setup. Provide easy integration with other softwares through DBus (Linux) and Named-Pipe (Windows) platform. Ready to use voice control interface for Windows and Linux. Origin of Design \uf0c1 Benjamin began as a voice control interface to control a PC without any interaction through hands. numerous other products exist on the market, offering specific application solutions. What sets Benjamin apart from these projects is its tailored design for individuals with handicap to use this system to interact with a PC all day long. This requirement stress over highest level of accuracy and focus on decreasing latency as many command and control actions require quick response time. One notable product for comparison is the Google Speech Recognition Engine integrated into YouTube's subtitle generator. This engine prioritizes accuracy across a diverse range of accents found in the general population. However, if user accent is a minority, the accuracy will compromise. Another critical assumption in the YouTube ASR engine is the availability of future voice data ( non causal ), with no stringent requirement on output latency. This drastically alters the architecture of ASR engine design to maximize the accuracy. Benjamin addresses these challenges by decreasing the number of words in the vocabulary and focus on single person's accent rather than general public to achieve same or better accuracy than major ASR engines, while maintaining low latency output.It aims to provide users in need of creating a voice control software a better starting point so hopefully in future we will see more progress in future of robust ASR engines and voice control softwares for this specific application.","title":"Home"},{"location":"#features","text":"Speech Recognition Engine without connection to cloud or external server. Low latency recognition reaching down to less than 100ms. Remove wake-up word for every command. Enable local training of the model and fine-tune it for individual voices. Up to 99% accuracy thanks to the small set of words and adapt to the user's accent. Offer full customization of the word list and control over the training setup. Provide easy integration with other softwares through DBus (Linux) and Named-Pipe (Windows) platform. Ready to use voice control interface for Windows and Linux.","title":"Features"},{"location":"#origin-of-design","text":"Benjamin began as a voice control interface to control a PC without any interaction through hands. numerous other products exist on the market, offering specific application solutions. What sets Benjamin apart from these projects is its tailored design for individuals with handicap to use this system to interact with a PC all day long. This requirement stress over highest level of accuracy and focus on decreasing latency as many command and control actions require quick response time. One notable product for comparison is the Google Speech Recognition Engine integrated into YouTube's subtitle generator. This engine prioritizes accuracy across a diverse range of accents found in the general population. However, if user accent is a minority, the accuracy will compromise. Another critical assumption in the YouTube ASR engine is the availability of future voice data ( non causal ), with no stringent requirement on output latency. This drastically alters the architecture of ASR engine design to maximize the accuracy. Benjamin addresses these challenges by decreasing the number of words in the vocabulary and focus on single person's accent rather than general public to achieve same or better accuracy than major ASR engines, while maintaining low latency output.It aims to provide users in need of creating a voice control software a better starting point so hopefully in future we will see more progress in future of robust ASR engines and voice control softwares for this specific application.","title":"Origin of Design"},{"location":"About/","text":"About \uf0c1 Feel free to contact us by bijan<at>binaee{dot}<c0m>. I'm developer based in Netherlands and open to sponsorships program Aknolegdment \uf0c1 This project wouldn't be possible without the help of: M.P. Zanoosi S. Dadashi Dr. E. Akhavan M. Abdollah Zadeh OpenFST HTKBook Kaldi","title":"About"},{"location":"About/#about","text":"Feel free to contact us by bijan<at>binaee{dot}<c0m>. I'm developer based in Netherlands and open to sponsorships program","title":"About"},{"location":"About/#aknolegdment","text":"This project wouldn't be possible without the help of: M.P. Zanoosi S. Dadashi Dr. E. Akhavan M. Abdollah Zadeh OpenFST HTKBook Kaldi","title":"Aknolegdment"},{"location":"Additional-Commands/","text":"--|--","title":"Additional Commands"},{"location":"Advanced-Engine-Settings/","text":"Batool is configurable via conf file next to BaTool application. It has 4 main sections to configure: Model Section: \uf0c1 This section defines the location of Kaldi model files. The addresses are relative to where BaTool application exists. ; Model path [model] fst = \"Model/HCLG.fst\" mdl = \"Model/final.oalimdl\" word = \"Model/words.txt\" cmvn = \"Model/global_cmvn.stats\" Decoder Section: \uf0c1 Kaldi related decoder settings. max_active = 900 min_active = 200 train_max = 5 ac_scale = 0.05 min_sil = 20 train_max : Maximum number of same samples for later training. min_sil : Minimum silence before detection. This value directly connected with accuracy and latency.","title":"Advanced Engine Settings"},{"location":"Advanced-Engine-Settings/#model-section","text":"This section defines the location of Kaldi model files. The addresses are relative to where BaTool application exists. ; Model path [model] fst = \"Model/HCLG.fst\" mdl = \"Model/final.oalimdl\" word = \"Model/words.txt\" cmvn = \"Model/global_cmvn.stats\"","title":"Model Section:"},{"location":"Advanced-Engine-Settings/#decoder-section","text":"Kaldi related decoder settings. max_active = 900 min_active = 200 train_max = 5 ac_scale = 0.05 min_sil = 20 train_max : Maximum number of same samples for later training. min_sil : Minimum silence before detection. This value directly connected with accuracy and latency.","title":"Decoder Section:"},{"location":"Advanced-Training/","text":"Verification \uf0c1 When you are using Benjamin regularly, samples will be generated when issueing commands or recorded when in sleep mode saying ordinary words. To use these samples, you need to assure that they are matched with the detected words. For verifying these samples you can switch to Verify tab and press space to start verification process. While verifying sleep mode samples, make sure that all words are detected wrong. Verifying If the sample is wrong press Z to delete sample, while playing or at Decide Pause status after voice stopped. By default after playing each sample in unverified category, if there wasn't any key press, the sample will be verified. you can change this behavior by pressing R .","title":"Advanced Training"},{"location":"Advanced-Training/#verification","text":"When you are using Benjamin regularly, samples will be generated when issueing commands or recorded when in sleep mode saying ordinary words. To use these samples, you need to assure that they are matched with the detected words. For verifying these samples you can switch to Verify tab and press space to start verification process. While verifying sleep mode samples, make sure that all words are detected wrong. Verifying If the sample is wrong press Z to delete sample, while playing or at Decide Pause status after voice stopped. By default after playing each sample in unverified category, if there wasn't any key press, the sample will be verified. you can change this behavior by pressing R .","title":"Verification"},{"location":"Capture-Audio-Samples/","text":"specify a category name by pressing S . Hint Category name is any desired name to distinguish a single set of voice samples. A good name could be your microphone name such as Sennheiser PC7 or Bijan-house which corresponds to the microphone and the place respectively which the samples are recorded. Start to record by pressing space . Info When the recording starts couple of words will be shown up on the screen. The default setting is 3 words and you have 3 seconds to say them. The time will be shown up on the screen. For best performance try to say the words not close to the edges, so give a small pause after start and try to finish up 0.2 second before time up. You will be prompted to record count samples. at any given time you can pause the Record by pressing space or completely get out of the record panel by pressing Escape . Repeat till you have enough samples. More Info \uf0c1 A detailed description of ArBade functionalities is discussed in the User Guide .","title":"Capture Audio Samples"},{"location":"Capture-Audio-Samples/#more-info","text":"A detailed description of ArBade functionalities is discussed in the User Guide .","title":"More Info"},{"location":"Controlling-Keyboard/","text":"Characters \uf0c1 Command Action Command Action Command Action arch a bravo b catalina c delta d echo e fish f golf g hotel h india i jordan j kilo k limo l mike m november n oscar o papa p quebec q romeo r sierra s tango t u u vpn v eggs x yankee y zed z period . comma , dash - plus + level = bracket [ curly ] semi ; slash / canals \\ quote ' Special Keys \uf0c1 Command Action Command Action Command Action super control ctrl shift shift alt alt sim space github caps lock home home end end edge Menu key","title":"Controlling Keyboard"},{"location":"Controlling-Keyboard/#characters","text":"Command Action Command Action Command Action arch a bravo b catalina c delta d echo e fish f golf g hotel h india i jordan j kilo k limo l mike m november n oscar o papa p quebec q romeo r sierra s tango t u u vpn v eggs x yankee y zed z period . comma , dash - plus + level = bracket [ curly ] semi ; slash / canals \\ quote '","title":"Characters"},{"location":"Controlling-Keyboard/#special-keys","text":"Command Action Command Action Command Action super control ctrl shift shift alt alt sim space github caps lock home home end end edge Menu key","title":"Special Keys"},{"location":"Controlling-Mouse/","text":"Command Action Description Mouse Left Left Click Mouse Right Right Click Mouse Mike Middle Click Mouse Up Scroll Up Mouse Down Scroll Down Mouse Papa Primary monitor Mouse Sierra Secondary monitor Mouse Limo Primary monitor left side Mouse Romeo Primary monitor right side Mouse U Scroll Up 4 times Mouse Delta Scroll Down 4 times Mouse Golf Scroll Up 6 times Mouse Hotel Scroll Down 6 times Dive Continuous Scroll Down In Firefox with extension enabled Sky Continuous Scroll Up In Firefox with extension enabled Dive <Num> Continuous Scroll Down Num will define the speed Sky <Num> Continuous Scroll up Num will define the speed kick Chess left click Side Chess Right click Drag Chess Drag between two points System Sierra Take screenshot and put it in clipboard Comments chess on secondary monitor Chess in Action \uf0c1","title":"Controlling Mouse"},{"location":"Controlling-Mouse/#chess-in-action","text":"","title":"Chess in Action"},{"location":"First-Time-Bring-Up/","text":"BaTool is a real-time speech recognition engine, that gets a triphone Kaldi model and do a low latency speech recognition on the data coming from the system default microphone. Topbar \uf0c1 Topbar is like PolyBar , it manages different workspace, shows system status and BaTool detection output. Workspaces: you can switch between 6 workspaces showed with different icons. Word detection output: raw result of voice engine. Date and time Music widget: Pause/play music or go to the next/previous track. CPU usage Speaker: By clicking on this icon you can alter between speaker and headphone. By scrolling you can increase/decrease the volume. Focused application System status: Shows if system is running or sleeping or halted. The underline color of each word is set by neural network and it's sorted from top to bottom based on the confidence level of detection: ( High / Mid-High / Mid-Low / Low )","title":"First Time Bring-up"},{"location":"First-Time-Bring-Up/#topbar","text":"Topbar is like PolyBar , it manages different workspace, shows system status and BaTool detection output. Workspaces: you can switch between 6 workspaces showed with different icons. Word detection output: raw result of voice engine. Date and time Music widget: Pause/play music or go to the next/previous track. CPU usage Speaker: By clicking on this icon you can alter between speaker and headphone. By scrolling you can increase/decrease the volume. Focused application System status: Shows if system is running or sleeping or halted. The underline color of each word is set by neural network and it's sorted from top to bottom based on the confidence level of detection: ( High / Mid-High / Mid-Low / Low )","title":"Topbar"},{"location":"Global-Shortcuts/","text":"Command Action Example Description Super <Num> + <Num> Super Two Switch to workspace <Num> (Max: 6) Super Shift <Num> + Shift + <Num> Super Shift Four Move active window to workspace <Num> Super <Left/Right> + \u2190/\u2794 Super Left Move window to the <Left/Right> Super Shift <Left/Right> + Shift + \u2190/\u2794 Super Shift Left Move window to next screen Super Charlie + C - Open Chrome Super Delta + D - Open Firefox Super Echo + E - Open Windows Explorer Super India + I - Open Inkscape Super Papa + P - Open Qt Super Quebec + Q - Close active window Super Sierra + S - Open Spotify Super Tango + T - Open Telegram Super Wake + W - Open GitKraken Super Yankee + Y - Open VSCode Super Zed + Z - Open Slack Super Period + . - Open voice engine settings","title":"Global Shortcuts"},{"location":"Installation/","text":"Warning At the moment Benjamin-ASR prioritizes enabling user and increase the productivity. Unfortunately due to lack of resources, security received less attention. Therefore, it is not advisable to install this software on a end-user machines where security is a concern. Requirements \uf0c1 Operating system: Windows 10 22H2, Windows 11 21H2 Access level: Need administrator user account with disabled UAC CPU: Intel I5 10500 RAM: 2 GB GPU: Not required Windows \uf0c1 Install Firefox Developer Edition: Firefox-Dev_120.0b1.exe Info Firefox only allows extensions that are signed by Mozilla to be installed in firefox since version 92. Unfortunately we don't like their ideas of monopoly on web extensions and the hassle of sending code each time to Mozilla and waiting for them to sign. To bypass this feature, the only way is to install firefox developer edition. Hint Our extension is open sourced and not obfuscated, so you are always welcome to review it yourself and raise any comments in GitHub issues . Install extension Download Benjfox.xpi extension Open Firefox, press Ctrl+Shift+A to open Add-on page. Click on the settings icon and select Install Add-on From File . Select xpi file and install. Info Firefox extension only needed to facilitate scrolling up and down through voice command. You can totally skip step 1 and 2, if you don't need this functionality. Install Benjamin-ASR: Benjamin-ASR.exe Linux \uf0c1 Linux is not officially supported, but if you are an enthusiastic guy you should be able to get it up and running by following guide: Install Awesome-WM and Polybar and Firefox Developer Edition Install extension Download Benjfox.xpi extension Open Firefox, press Ctrl+Shift+A to open Add-on page. Click on the settings icon and select Install Add-on From File . Select xpi file and install. Install config files Install config files from Bijoux repository for PolyBar and Awesome-WM.","title":"Installation"},{"location":"Installation/#requirements","text":"Operating system: Windows 10 22H2, Windows 11 21H2 Access level: Need administrator user account with disabled UAC CPU: Intel I5 10500 RAM: 2 GB GPU: Not required","title":"Requirements"},{"location":"Installation/#windows","text":"Install Firefox Developer Edition: Firefox-Dev_120.0b1.exe Info Firefox only allows extensions that are signed by Mozilla to be installed in firefox since version 92. Unfortunately we don't like their ideas of monopoly on web extensions and the hassle of sending code each time to Mozilla and waiting for them to sign. To bypass this feature, the only way is to install firefox developer edition. Hint Our extension is open sourced and not obfuscated, so you are always welcome to review it yourself and raise any comments in GitHub issues . Install extension Download Benjfox.xpi extension Open Firefox, press Ctrl+Shift+A to open Add-on page. Click on the settings icon and select Install Add-on From File . Select xpi file and install. Info Firefox extension only needed to facilitate scrolling up and down through voice command. You can totally skip step 1 and 2, if you don't need this functionality. Install Benjamin-ASR: Benjamin-ASR.exe","title":"Windows"},{"location":"Installation/#linux","text":"Linux is not officially supported, but if you are an enthusiastic guy you should be able to get it up and running by following guide: Install Awesome-WM and Polybar and Firefox Developer Edition Install extension Download Benjfox.xpi extension Open Firefox, press Ctrl+Shift+A to open Add-on page. Click on the settings icon and select Install Add-on From File . Select xpi file and install. Install config files Install config files from Bijoux repository for PolyBar and Awesome-WM.","title":"Linux"},{"location":"Quick-Start-Guide/","text":"Overview \uf0c1 Typically, it takes about a week to record all the required samples to make a fully functional model. However in less than an hour, you should be able to create a small demo model to checkout the accuracy and get an idea of the whole process. 1. Decide on Your Wordlist: less than 20 mins First you need to decide if you want to train a full model or just a demo model. Training a full model requires significantly more time, therefore if you are a new user, it is recommended to start with a demo model. Demo Case: Keep all the numbers from zero to nine, remove all other words in the vocabulary. Default Case: No changes need to be made. Customized Case: Add or remove words as you please. However keep in mind that to achieve decent performance from the engine, you need to train Count^2 samples, where Count represents the number of words in your word list. 2. Record Audio Samples: 1hr / 1week Hint The number of samples depend on the user but generally the more the merrier. For the small demo model 400 samples should be enough. However for full functional model usually at least 5K samples is needed. Sample means an audio .wav file consisted of three spoken words. 3. Train a Model: 30 mins Open Trainer and train a model. 4. Learn How to Use and Improve the Model Next step is to learn how to control mouse and keyboard and special features Benjamin provides to ease use of common application like Firefox, Slack and ... . Benjamin also records all the samples while you use the software so you can later train on these samples too.","title":"Quick Start Guide"},{"location":"Quick-Start-Guide/#overview","text":"Typically, it takes about a week to record all the required samples to make a fully functional model. However in less than an hour, you should be able to create a small demo model to checkout the accuracy and get an idea of the whole process. 1. Decide on Your Wordlist: less than 20 mins First you need to decide if you want to train a full model or just a demo model. Training a full model requires significantly more time, therefore if you are a new user, it is recommended to start with a demo model. Demo Case: Keep all the numbers from zero to nine, remove all other words in the vocabulary. Default Case: No changes need to be made. Customized Case: Add or remove words as you please. However keep in mind that to achieve decent performance from the engine, you need to train Count^2 samples, where Count represents the number of words in your word list. 2. Record Audio Samples: 1hr / 1week Hint The number of samples depend on the user but generally the more the merrier. For the small demo model 400 samples should be enough. However for full functional model usually at least 5K samples is needed. Sample means an audio .wav file consisted of three spoken words. 3. Train a Model: 30 mins Open Trainer and train a model. 4. Learn How to Use and Improve the Model Next step is to learn how to control mouse and keyboard and special features Benjamin provides to ease use of common application like Firefox, Slack and ... . Benjamin also records all the samples while you use the software so you can later train on these samples too.","title":"Overview"},{"location":"Train-Model/","text":"After recording enough samples, train your model by Pressing T . Hint At any time outside of terminal, by pressing P or clicking on Console tab, you can access the results of running train scripts in terminal. Wait for Generate Enn Sample dialog to show up, this could take a while. Select No in the two following dialogs. Hint Generate Enn Samples is only required for training neural network. If you are a newcomer you can skip this for now. Next dialog is also only used in advanced mode. So you should be fine skipping both of them as mentioned. To learn more about these two features please checkout Advanced Training . Congrats! Your model is now ready.","title":"Train Model"},{"location":"Train-Neural-Network/","text":"ENN \uf0c1 ENN generates neural network model from ENN samples. ENN samples are Cepstrums that were normalized and aligned to a single word saved as a simple 40x40 binary array. we feed this to a convolutional neural network followed by a fully connected layer to detect out of vocabulary words. ENN is an optional feature that brings more accuracy and let you leave the system on always, so you don't need to say wake up words. ENN user interface includes these main tabs: Train Sample Link Wrong ENN Train \uf0c1 In Train Tab you can watch the learning procedure of each word. In train Panel, learning loss and test loss is shown for first 4 words in wordlist panel. You can watch other word loss plots by pressing Up/Down arrow keys on keyboard. Hover on each word in word list panel to see how many samples are trained from total samples. Also you can sort the model statistics based on train precision, test precision and loss by clicking relevant table header (to reset the sort method click on ID header). Learned models will be saved in Model directory. Parameters \uf0c1 Thread Num: Number of concurrent words to learn. (Be careful to set it lower than your number of CPU cores to prevent windows freeze) Learning rate: Base learning rate for each word to start training. Target Loss: Loss that model is considered learned. Param Num: Number of parameters the model has to learn. True Count: Number of ENN samples in enn/true directory. False Count: Number of ENN samples in enn/false directory. Learned Count: Number of words that their loss become less than target loss. Loop Count: Training for each word takes 200 epoch, if target loss not reached. Then next word's training procedure starts. After all words training finished, program will start from first word and increases loop count. Train Time: Time that program is training words. ENN Sample Link \uf0c1 In sample link tab all true sample Cepstrums are plotted in images. In this way you can find out why training for a word has large loss and not reaches the target loss. By using direction arrow keys you can select then play the wave related to each sample. Also change the word to see its samples. (Train procedure is not stopped while sample link is active) Wrong \uf0c1 In training procedure, some samples couldn't be learned, they will be stored in Models/Wrong directory. For each model there is a relevant .wrong file that is filled by all failed samples. In the same way as Sample Link you can watch wrong detected sample Cepstrums and here relevant recorded wave. The label for each sample is shown in right bottom corner of its Cepstrum.","title":"Train Neural Network"},{"location":"Train-Neural-Network/#enn","text":"ENN generates neural network model from ENN samples. ENN samples are Cepstrums that were normalized and aligned to a single word saved as a simple 40x40 binary array. we feed this to a convolutional neural network followed by a fully connected layer to detect out of vocabulary words. ENN is an optional feature that brings more accuracy and let you leave the system on always, so you don't need to say wake up words. ENN user interface includes these main tabs: Train Sample Link Wrong","title":"ENN"},{"location":"Train-Neural-Network/#enn-train","text":"In Train Tab you can watch the learning procedure of each word. In train Panel, learning loss and test loss is shown for first 4 words in wordlist panel. You can watch other word loss plots by pressing Up/Down arrow keys on keyboard. Hover on each word in word list panel to see how many samples are trained from total samples. Also you can sort the model statistics based on train precision, test precision and loss by clicking relevant table header (to reset the sort method click on ID header). Learned models will be saved in Model directory.","title":"ENN Train"},{"location":"Train-Neural-Network/#parameters","text":"Thread Num: Number of concurrent words to learn. (Be careful to set it lower than your number of CPU cores to prevent windows freeze) Learning rate: Base learning rate for each word to start training. Target Loss: Loss that model is considered learned. Param Num: Number of parameters the model has to learn. True Count: Number of ENN samples in enn/true directory. False Count: Number of ENN samples in enn/false directory. Learned Count: Number of words that their loss become less than target loss. Loop Count: Training for each word takes 200 epoch, if target loss not reached. Then next word's training procedure starts. After all words training finished, program will start from first word and increases loop count. Train Time: Time that program is training words.","title":"Parameters"},{"location":"Train-Neural-Network/#enn-sample-link","text":"In sample link tab all true sample Cepstrums are plotted in images. In this way you can find out why training for a word has large loss and not reaches the target loss. By using direction arrow keys you can select then play the wave related to each sample. Also change the word to see its samples. (Train procedure is not stopped while sample link is active)","title":"ENN Sample Link"},{"location":"Train-Neural-Network/#wrong","text":"In training procedure, some samples couldn't be learned, they will be stored in Models/Wrong directory. For each model there is a relevant .wrong file that is filled by all failed samples. In the same way as Sample Link you can watch wrong detected sample Cepstrums and here relevant recorded wave. The label for each sample is shown in right bottom corner of its Cepstrum.","title":"Wrong"},{"location":"Capture-Audio-Samples/ug/","text":"User Guide \uf0c1 Overview Record Record Status Record Parameters Record Shortcuts Verify Verify Status Verify Parameters Verify Shortcuts Sleep Wrong False Test Enn False Console Stat Overview \uf0c1 ArBade is a shortcut based application. You can see the common shortcuts on the top bar or press / to see all the shortcuts. Record \uf0c1 While recording the samples for training the voice recognition engine, you should know the status, parameters and shortcuts related to recording. Record Status \uf0c1 Rec : Records your voice Pause : Pause the Recording Procedure Stop : Stop the record and navigate to statistics panel. Req Pause : Requested pause will be committed after recording finished Break : Time to let you read the words before recording started Record Parameters \uf0c1 Category : Directories to classify samples you record with different devices. exceptions are unverified , online , sleep , wrong , test , enn and efalse which are used internally by Benjamin. Pause Time : Break time that lets you read the words before record process starts. Num of Words : Specify the number of words for recording samples. Rec Time : Defines the period of recording time. Count : Set this to the total number of samples you want to record in a single round. Focus Word : A displayed set of words will contain the Focus Word . Power : After recording the sample power of the voice will be displayed. Care about this parameter as this will be very low if the recording device has any problem. Time : Shows how much time passed from Rec Time Word : Shows the words you should say while recording Status : Shows recording status Record Shortcuts \uf0c1 S : Set Category , unverified and efalse are prohibited. A dialog will be shown and ask for the desired Category . You can create a new Category or change between categories produced in the past. Space : Start or Pause recording. Up/Down : Increase/Decrease Pause Time . Right/Left : Increase/Decrease Rec Time . C : Change count, a dialog will be opened and ask for how many samples would you record. F : Set Focus Word , then the displayed words collection will contain Focus Word . A dialog will be opened and ask for the id of Focus Word . W : Opens a dialog to ask Num of Words . O : Opens selected Category directory. Verify \uf0c1 By using Benjamin regularly, many samples will be created as online samples. However, these samples are not labeled correctly. There may be some mistakes among words from a sample. These samples are accumulated in unverified directory and by verifying them, they will be moved to online directory. Verification is done by playing the samples in unverified directory. you can refer to this section to know all status, parameters and shortcuts related to verification. Verify Shortcuts \uf0c1 Space : Start or Pause playing. Up/Down : Increase/Decrease Pause Time . F : Set Focus Word , then the displayed words collection will contain Focus Word . A dialog will be opened and ask for the id of Focus Word . O : Opens unverified directory. Z : Press to move the sample from the unverified directory to the wrong directory. R : Changes default decision/action for verifying samples. Copy mode means after the Decide Pause timeout, the sample will be copied to the online directory. In the same way in Delete mode, timeout will cause sample removal. Sleep \uf0c1 Verify samples recorded in sleep mode. In this mode listen to the recorded samples, if they contain any true samples press Z to get rid of them. All other samples will automatically moved to the wrong directory and they will be used to train the enn model. Wrong \uf0c1 These are verified samples from the sleep directory. They are verified to be wrong samples, not true ones! In this mode, you will be able to review them and check if some samples are moved to this directory by accident. False \uf0c1 During generating Enn samples, some of the samples in the train directory will not detect correctly, these samples will be moved to the efalse directory. In this mode, you can listen to these samples and judge whether they are real samples or the wrong ones which you should get rid of them. Test \uf0c1 After training on samples, the model is evaluated through test samples. Word error rate (WER) and Sentence error rate (SER) are calculated by predicting test samples. Then false detected samples are listed in this tab and you can listen to them to figure out what went wrong. Enn False \uf0c1 BaTool generates enn samples, from both train samples and wrong samples. The enn directory is the destination of this process. Enn files from the train directory are located in enn/true and wrong directory-related files are in enn/false . In the Enn False tab, only false statistics are shown. By clicking the trash icon, all Enn samples will be deleted. Console \uf0c1 Training on samples is started by pressing T . After training is finished, a dialog pops up and asks to generate enn samples from audio samples. Neural Network will be trained from these enn samples. When generating Enn Samples is finished, another dialog arises and asks about verifying generated engine false detected samples. Engine false detected samples, abbreviated as efalse samples, are collected in the efalse directory. They are generated after training, and while testing samples in the test directory. You can verify them by switching to False and Test tabs. Stat \uf0c1 Arbitrary name of category. Record list showing the samples recorded. Word list showing how many samples include the specific word. sample count in specific category.","title":"User Guide"},{"location":"Capture-Audio-Samples/ug/#user-guide","text":"Overview Record Record Status Record Parameters Record Shortcuts Verify Verify Status Verify Parameters Verify Shortcuts Sleep Wrong False Test Enn False Console Stat","title":"User Guide"},{"location":"Capture-Audio-Samples/ug/#overview","text":"ArBade is a shortcut based application. You can see the common shortcuts on the top bar or press / to see all the shortcuts.","title":"Overview"},{"location":"Capture-Audio-Samples/ug/#record","text":"While recording the samples for training the voice recognition engine, you should know the status, parameters and shortcuts related to recording.","title":"Record"},{"location":"Capture-Audio-Samples/ug/#record-status","text":"Rec : Records your voice Pause : Pause the Recording Procedure Stop : Stop the record and navigate to statistics panel. Req Pause : Requested pause will be committed after recording finished Break : Time to let you read the words before recording started","title":"Record Status"},{"location":"Capture-Audio-Samples/ug/#record-parameters","text":"Category : Directories to classify samples you record with different devices. exceptions are unverified , online , sleep , wrong , test , enn and efalse which are used internally by Benjamin. Pause Time : Break time that lets you read the words before record process starts. Num of Words : Specify the number of words for recording samples. Rec Time : Defines the period of recording time. Count : Set this to the total number of samples you want to record in a single round. Focus Word : A displayed set of words will contain the Focus Word . Power : After recording the sample power of the voice will be displayed. Care about this parameter as this will be very low if the recording device has any problem. Time : Shows how much time passed from Rec Time Word : Shows the words you should say while recording Status : Shows recording status","title":"Record Parameters"},{"location":"Capture-Audio-Samples/ug/#record-shortcuts","text":"S : Set Category , unverified and efalse are prohibited. A dialog will be shown and ask for the desired Category . You can create a new Category or change between categories produced in the past. Space : Start or Pause recording. Up/Down : Increase/Decrease Pause Time . Right/Left : Increase/Decrease Rec Time . C : Change count, a dialog will be opened and ask for how many samples would you record. F : Set Focus Word , then the displayed words collection will contain Focus Word . A dialog will be opened and ask for the id of Focus Word . W : Opens a dialog to ask Num of Words . O : Opens selected Category directory.","title":"Record Shortcuts"},{"location":"Capture-Audio-Samples/ug/#verify","text":"By using Benjamin regularly, many samples will be created as online samples. However, these samples are not labeled correctly. There may be some mistakes among words from a sample. These samples are accumulated in unverified directory and by verifying them, they will be moved to online directory. Verification is done by playing the samples in unverified directory. you can refer to this section to know all status, parameters and shortcuts related to verification.","title":"Verify"},{"location":"Capture-Audio-Samples/ug/#verify-shortcuts","text":"Space : Start or Pause playing. Up/Down : Increase/Decrease Pause Time . F : Set Focus Word , then the displayed words collection will contain Focus Word . A dialog will be opened and ask for the id of Focus Word . O : Opens unverified directory. Z : Press to move the sample from the unverified directory to the wrong directory. R : Changes default decision/action for verifying samples. Copy mode means after the Decide Pause timeout, the sample will be copied to the online directory. In the same way in Delete mode, timeout will cause sample removal.","title":"Verify Shortcuts"},{"location":"Capture-Audio-Samples/ug/#sleep","text":"Verify samples recorded in sleep mode. In this mode listen to the recorded samples, if they contain any true samples press Z to get rid of them. All other samples will automatically moved to the wrong directory and they will be used to train the enn model.","title":"Sleep"},{"location":"Capture-Audio-Samples/ug/#wrong","text":"These are verified samples from the sleep directory. They are verified to be wrong samples, not true ones! In this mode, you will be able to review them and check if some samples are moved to this directory by accident.","title":"Wrong"},{"location":"Capture-Audio-Samples/ug/#false","text":"During generating Enn samples, some of the samples in the train directory will not detect correctly, these samples will be moved to the efalse directory. In this mode, you can listen to these samples and judge whether they are real samples or the wrong ones which you should get rid of them.","title":"False"},{"location":"Capture-Audio-Samples/ug/#test","text":"After training on samples, the model is evaluated through test samples. Word error rate (WER) and Sentence error rate (SER) are calculated by predicting test samples. Then false detected samples are listed in this tab and you can listen to them to figure out what went wrong.","title":"Test"},{"location":"Capture-Audio-Samples/ug/#enn-false","text":"BaTool generates enn samples, from both train samples and wrong samples. The enn directory is the destination of this process. Enn files from the train directory are located in enn/true and wrong directory-related files are in enn/false . In the Enn False tab, only false statistics are shown. By clicking the trash icon, all Enn samples will be deleted.","title":"Enn False"},{"location":"Capture-Audio-Samples/ug/#console","text":"Training on samples is started by pressing T . After training is finished, a dialog pops up and asks to generate enn samples from audio samples. Neural Network will be trained from these enn samples. When generating Enn Samples is finished, another dialog arises and asks about verifying generated engine false detected samples. Engine false detected samples, abbreviated as efalse samples, are collected in the efalse directory. They are generated after training, and while testing samples in the test directory. You can verify them by switching to False and Test tabs.","title":"Console"},{"location":"Capture-Audio-Samples/ug/#stat","text":"Arbitrary name of category. Record list showing the samples recorded. Word list showing how many samples include the specific word. sample count in specific category.","title":"Stat"}]}